/*
 * @(#)build.gradle
 *
 * Copyright C.T.Co Ltd, 15/25 Jurkalnes Street, Riga LV-1046, Latvia. All rights reserved.
 */

plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'net.researchgate.release' version '2.8.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.jparsec', name: 'jparsec', version: '2.2.1'
    implementation group: 'com.googlecode.plist', name: 'dd-plist', version: '1.23'
    implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'

    implementation group: 'commons-io', name: 'commons-io', version:'2.11.0'
    implementation group: 'org.apache.commons', name:'commons-compress', version:'1.21'
    implementation group: 'org.apache.commons', name:'commons-exec', version:'1.3'
    implementation group: 'org.apache.commons', name:'commons-lang3', version:'3.12.0'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'

    compile gradleApi()
    compile localGroovy()

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

group = 'lv.ctco.scm'
archivesBaseName = 'gradle-mobile-plugin'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnit()
}

jar {
    manifest {
        attributes ("Specification-Vendor": "C.T.Co, Ltd.",
                    "Specification-Title": "Gradle Mobile Plugin",
                    "Specification-Version": project.getVersion().minus('-SNAPSHOT'),
                    "Implementation-Vendor": "C.T.Co, Ltd.",
                    "Implementation-Title": "gradle-mobile-plugin",
                    "Implementation-Version": project.getVersion())
    }
}

// Custom functionality for TeamCity integration
import lv.ctco.scm.teamcity.ProjectInfoTask
tasks.register('projectInfo', ProjectInfoTask)

// Custom functionality to provide artifact signing key onto public CI
import lv.ctco.scm.ci.SetupSigningKeyTask
tasks.register('setupSigningKey', SetupSigningKeyTask)

signing {
    required { hasProperty("signingKey") && hasProperty("signingPassword") }
    useInMemoryPgpKeys(findProperty("signingKey").toString(), findProperty("signingPassword").toString())
    sign publishing.publications
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        plugin (MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = 'C.T.Co Mobile Plugin for Gradle'
                description = 'The C.T.Co Mobile Plugin for Gradle helps you to configure and build Xcode and Xamarin (iOS, Android) apps.'
                url = 'https://github.com/ctco/gradle-mobile-plugin'

                scm {
                    connection = 'scm:git:git@github.com:ctco/gradle-mobile-plugin.git'
                    developerConnection = 'scm:git:git@github.com:ctco/gradle-mobile-plugin.git'
                    url = 'https://github.com/ctco/gradle-mobile-plugin'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'Quesar'
                        name = 'Ivars Bērziņš'
                        email = 'Ivars.Berzinsh@ctco.lv'
                    }
                }
            }
        }
    }
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preTagCommitMessage = '[Release] [skip ci] - pre tag commit: '
    newVersionCommitMessage = '[Release] [skip ci] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
}

nexusPublishing {
    packageGroup = 'lv.ctco'
    repositories {
        Sonatype {
            nexusUrl = uri('https://ossrh-staging-api.central.sonatype.com/service/local/')
            snapshotRepositoryUrl = uri('https://central.sonatype.com/repository/maven-snapshots/')
            username = findProperty('ossrhUsername')
            password = findProperty('ossrhPassword')
        }
    }
}

project.afterEvaluate {
    afterReleaseBuild.dependsOn publishToSonatype
}
